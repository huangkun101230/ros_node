// Generated by gencpp from file tutorials/multiplierRequest.msg
// DO NOT EDIT!


#ifndef TUTORIALS_MESSAGE_MULTIPLIERREQUEST_H
#define TUTORIALS_MESSAGE_MULTIPLIERREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tutorials
{
template <class ContainerAllocator>
struct multiplierRequest_
{
  typedef multiplierRequest_<ContainerAllocator> Type;

  multiplierRequest_()
    : a(0.0)
    , b(0.0)  {
    }
  multiplierRequest_(const ContainerAllocator& _alloc)
    : a(0.0)
    , b(0.0)  {
  (void)_alloc;
    }



   typedef float _a_type;
  _a_type a;

   typedef float _b_type;
  _b_type b;





  typedef boost::shared_ptr< ::tutorials::multiplierRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tutorials::multiplierRequest_<ContainerAllocator> const> ConstPtr;

}; // struct multiplierRequest_

typedef ::tutorials::multiplierRequest_<std::allocator<void> > multiplierRequest;

typedef boost::shared_ptr< ::tutorials::multiplierRequest > multiplierRequestPtr;
typedef boost::shared_ptr< ::tutorials::multiplierRequest const> multiplierRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tutorials::multiplierRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tutorials::multiplierRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tutorials::multiplierRequest_<ContainerAllocator1> & lhs, const ::tutorials::multiplierRequest_<ContainerAllocator2> & rhs)
{
  return lhs.a == rhs.a &&
    lhs.b == rhs.b;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tutorials::multiplierRequest_<ContainerAllocator1> & lhs, const ::tutorials::multiplierRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tutorials

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tutorials::multiplierRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tutorials::multiplierRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tutorials::multiplierRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tutorials::multiplierRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tutorials::multiplierRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tutorials::multiplierRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tutorials::multiplierRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3f6326d24b4937f854196fd3a843f42e";
  }

  static const char* value(const ::tutorials::multiplierRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3f6326d24b4937f8ULL;
  static const uint64_t static_value2 = 0x54196fd3a843f42eULL;
};

template<class ContainerAllocator>
struct DataType< ::tutorials::multiplierRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tutorials/multiplierRequest";
  }

  static const char* value(const ::tutorials::multiplierRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tutorials::multiplierRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 a\n"
"float32 b\n"
;
  }

  static const char* value(const ::tutorials::multiplierRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tutorials::multiplierRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.a);
      stream.next(m.b);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct multiplierRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tutorials::multiplierRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tutorials::multiplierRequest_<ContainerAllocator>& v)
  {
    s << indent << "a: ";
    Printer<float>::stream(s, indent + "  ", v.a);
    s << indent << "b: ";
    Printer<float>::stream(s, indent + "  ", v.b);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TUTORIALS_MESSAGE_MULTIPLIERREQUEST_H
